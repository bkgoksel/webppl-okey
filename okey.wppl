/* Okey.wppl
 * This is the WebPPL implementation of an AI agent that plays the game of Okey.
 * It can take in a partial game state that contains a certain player's information about the
 * current state of the game, and chooses a softmax optimal action based on this state.
 */

// recurseLevels limits how many levels will the theory of mind apply when choosing action.
var recurseLevels = 0;


// actionPriorERP is an ERP that uniformly returns an action tuple independent of the state
var actionPriorERP = Enumerate(function() {
  var action = [flip(0.5) ? "center" : "pile", randomInteger(4)];
  return action; 
})

/* actionERP returns a distribution over the possible actions the player can take, with
 * actions that are more likely to lead to a win more probable. If the recursive depth is 0,
 * a random action is chosen.
 */
var actionERP = function(state, depth) {
    if(depth === 0) return actionPriorERP;
    
    Enumerate(function() {
        if(externOkey.win(state)) {
            var result = "WIN"
            return result
        } else {
            var actionSample = sample(actionPriorERP)
            var outcomeSample = sample(outcomeWithMainERP(state, actionSample, depth))
            factor(externOkey.win(outcomeSample) ? 0 : -10)
            return actionSample
        }
    });
}

/*
 * outcomeWithMainERP takes the current state and the action the deciding player is planning
 * to take, and returns a distribution over the possible outcomes if the player takes that
 * action. It takes in the depth and passes it to the action decision of the other player
 */
var outcomeWithMainERP = function(state, action, depth) {
    Enumerate(function() {
        if(action == "WIN" || state.unknownLocation.length + state.inOthersHand.length < 4) {
            return state
        } else {
            var drawIndex = randomInteger(state.unknownLocation.length);
            var newState = externOkey.applyMyAction(state, action, drawIndex);
            if(newState.unknownLocation.length + state.inOthersHand.length < 4) return newState;
            var othersState = sample(inferredStateERP(newState))
            var othersAction = sample(actionERP(othersState, depth - 1))
            if(othersAction == "WIN") {
                return newState
            }
            return sample(outcomeWithOtherERP(newState, othersAction, othersState.hand))
        }
    });
};

/*
 * outcomeWithOtherERP takes in the current state and a possible hand and action for the other
 * player and returns a distribution over the possible outcomes if the other player has the
 * given hand and takes the given action.
 */
var outcomeWithOtherERP = function(state, action, othersHand) {
    Enumerate(function() {
        if(action == "WIN" || state.unknownLocation.length === 0) {
            return state
        } else {
            var newState = externOkey.applyOthersAction(state, action, othersHand)
            var newAction = sample(actionERP(newState))
            return sample(outcomeWithMainERP(newState, newAction))
        }
    });
};

/*
 * inferredStateERP returns a distribution over the possible partial game states from the
 * other player's perspective given the information the current player has.
 */
var inferredStateERP = function(state) {
    Enumerate( function() {
        var knownOthers = state.inOthersHand.slice()
        var possibles = state.unknownLocation.slice()
        var newHand = sample(handERP(knownOthers, possibles, 4 - knownOthers.length))
        var otherPlayerState = externOkey.buildOthersState(state, newHand);
        return otherPlayerState
    });
};

/*
 * handERP returns a distribution over the possible hands the other player may have
 * given the tiles we already know they have, the set of tiles they may have and the
 * number of tiles needed to have a complete hand.
 */
var handERP = function(curHand, possibleTiles, numNeededTiles) {
    Enumerate(function() {
        if(numNeededTiles === 0) {
            return curHand
        } else {
            //console.log(possibleTiles.length)
            var nextTileIndex = randomInteger(possibleTiles.length)
            var nextTile = possibleTiles[nextTileIndex]
            var nextPossibleTiles = possibleTiles.slice()
            nextPossibleTiles.splice(nextTileIndex,1)
            var nextHand = curHand.slice()
            nextHand.push(nextTile)
            return sample(handERP(nextHand, nextPossibleTiles, 4 - nextHand.length))
        }
    });
};

console.log(actionERP(externOkey.generateStartState()));
