var recurseLevels = 0;

var actionPriorERP = Enumerate(function() {
  var action = [flip(0.5) ? "center" : "pile", randomInteger(4)];
  return action; 
})

var actionERP = function(state) {

    /*
    console.log("ActionERP called with:")
    console.log(state)
    */

    //console.log(recurseLevels)

    if(recurseLevels > 0) return actionPriorERP;
    
    Enumerate(function() {
        //console.log(state);
        if(externOkey.win(state)) {
            var result = "WIN"
            return result
        } else {
            var actionSample = sample(actionPriorERP)
            var outcomeSample = sample(outcomeWithMainERP(state, actionSample))
            factor(externOkey.win(outcomeSample) ? 0 : -10)
            return actionSample
        }
    });
}

var outcomeWithMainERP = function(state, action) {

    /*
    console.log("outcome with main ERP called with: ")
    console.log(state)
    console.log(action)
    */
    
    Enumerate(function() {
        if(action == "WIN" || state.unknownLocation.length + state.inOthersHand.length < 4) {
            return state
        } else {
            var drawIndex = randomInteger(state.unknownLocation.length);
            var newState = externOkey.applyMyAction(state, action, drawIndex);
            if(newState.unknownLocation.length + state.inOthersHand.length < 4) return newState;
            var othersState = sample(inferredStateERP(newState))
            recurseLevels = recurseLevels + 1;
            var othersAction = sample(actionERP(othersState))
            if(othersAction == "WIN") {
                return newState
            }
            return sample(outcomeWithOtherERP(newState, othersAction, othersState.hand))
        }
    });
};

var outcomeWithOtherERP = function(state, action, othersHand) {
    /*
    console.log("outcome with other's ERP called with: ")
    console.log(state)
    console.log(action)
    console.log(othersHand)
    */
    
    Enumerate(function() {
        if(action == "WIN" || state.unknownLocation.length === 0) {
            return state
        } else {
            var newState = externOkey.applyOthersAction(state, action, othersHand)
            var newAction = sample(actionERP(newState))
            return sample(outcomeWithMainERP(newState, newAction))
        }
    });
};

var inferredStateERP = function(state) {

    /*
    console.log("inferred state erp called with:")
    console.log(state)
    */
    
    Enumerate( function() {
        var knownOthers = state.inOthersHand.slice()
        var possibles = state.unknownLocation.slice()
        var newHand = sample(handERP(knownOthers, possibles, 4 - knownOthers.length))
        var otherPlayerState = externOkey.buildOthersState(state, newHand);
        return otherPlayerState
    });
};

var handERP = function(curHand, possibleTiles, numNeededTiles) {

    /*
    console.log("hand erp called with:")
    console.log(curHand)
    console.log(numNeededTiles);
    */
    
    Enumerate(function() {
        if(numNeededTiles === 0) {
            return curHand
        } else {
            //console.log(possibleTiles.length)
            var nextTileIndex = randomInteger(possibleTiles.length)
            var nextTile = possibleTiles[nextTileIndex]
            var nextPossibleTiles = possibleTiles.slice()
            nextPossibleTiles.splice(nextTileIndex,1)
            var nextHand = curHand.slice()
            nextHand.push(nextTile)
            return sample(handERP(nextHand, nextPossibleTiles, 4 - nextHand.length))
        }
    });
};
console.log(actionERP(externOkey.generateStartState()));
